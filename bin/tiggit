#!/usr/bin/env bash

# 
# tiggit - Automatic mirroring of remote git repositories
# 
# CHANGE LOG:
# 
# v0.1   - 2018-04-27 - Morgan Aldridge <morgant@makkintosshu.com>
#                       ...
# LICENSE:
# 
# Copyright (c) 2018-2019, Morgan T. Aldridge. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are met:
# 
# - Redistributions of source code must retain the above copyright notice, this 
#   list of conditions and the following disclaimer.
# - Redistributions in binary form must reproduce the above copyright notice, 
#   this list of conditions and the following disclaimer in the documentation 
#   and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 

# info
tool=$(basename "$0")
version='0.1'
copyright='(c) 2018-2019 Morgan T. Aldridge'

# environment variables
TIGGIT_CONFIG="${TIGGIT_CONFIG:-tiggit.conf}"
TIGGIT_CONFIG_PATH="${TIGGIT_CONFIG_PATH:-/etc}"
TIGGIT_MIRRORS_PATH="${TIGGIT_MIRRORS_PATH:-/Library/GitMirrors}"
TIGGIT_UPDATE_INTERVAL="${TIGGIT_UPDATE_INTERVAL:-900}"
TIGGIT_USER="${TIGGIT_USER:-_tiggit}"

# global variables
argv=()
argc=0
indent_level=0
verbose=false
daemon=false
config_file="${TIGGIT_CONFIG_PATH}/${TIGGIT_CONFIG}"
config_repos=()

function in_array() {
	local found=false
	local value="$1"
	shift

	if [ -z "$value" ]; then $found; fi
	if [ ${#@} -lt 1 ]; then $found; fi
	for array_value in "$@"; do
		if [ "$value" = "$array_value" ]; then found=true; fi
	done

	$found
}

function indent() {
  (( indent_level++ ))

  local line
  while IFS= read -r line; do
    for (( i=0; i<$indent_level; i++ )); do
      echo -n "  "
    done
    echo "${line}"
  done <<< "$($@)"

  (( indent_level-- ))
  return $?
}

# print usage instructions (help)
function usage() {
	echo "Usage: $tool [options] <command> [<args>]"
	echo
	echo 'Options:'
	echo '  -c, --config=<file>   : specify an alternate config file'
	echo '  -d, --daemon          : run as a daemon, mirroring repositories from config file'
	echo '  -h, --help            : print these usage instructions'
	echo '  -v, --verbose         : verbose output'
	echo '  -V, --version         : print the version'
	echo
	echo 'Commands:'
	echo '  list                  : list all mirrored git repositories'
	echo '  mirror <repository>   : mirror the specifed git repository'
	echo '  update [<repository>] : update all or just the specified git repository'
	echo
	echo 'Environment Variables:'
	echo '  TIGGIT_CONFIG         : name of config file (default: tiggit.conf)'
	echo '  TIGGIT_CONFIG_PATH    : path to configuration file (default: /etc)'
	echo '  TIGGIT_MIRRORS_PATH    : path to mirrored repositories (default: /Library/GitMirrors)'
	echo '  TIGGIT_UPDATE_INTERVAL: seconds between fetching updates to repositories (seconds; default: 900)'
}

# print version info
function version() {
	echo "$tool v$version $copyright"
}

# preprocess arguments and convert combined & long options to individual options
function args_preprocess() {
  # do nothing if we have no arguments to process
  if [ $# -eq 0 ]; then return 0; fi
  
	# step through all arguments and pre-process them (we do this so we can 
	# support multiple options specified together, e.g.: -abc vs. -a -b -c),
	# GNU-style long options with alternate style values, and for easier
	# actual handling
	while [ $# -gt 0 ]; do
		# is this an option (e.g. starts with a dash) or an argument?
		if [ "${1:0:1}" = "-" ]; then
			# is it a GNU-style long option (e.g. starts with a double-dash)?
			if [ "${1:0:2}" = "--" ]; then
				# push the option (everything before an equals) onto argv
				argv=("${argv[@]}" "${1%%=*}")
				
				# is it the alternate "--long-opt=value" format? if so, make it
				# "--long-opt value" format buy pushing the value (everything after the
				# equals) on as a separate argument
				case "$1" in *=*)
					argv=("${argv[@]}" "${1##*=}") ;;
				esac
			# otherwise, is it multiple single options specified together?
			elif [ ${#1} -gt 2 ]; then
				tmp="$1"
				# push each onto argv as single options
				for (( i=1; i < ${#tmp}; i++ )); do
					argv=("${argv[@]}" "-${tmp:$i:1}")
				done
			# otherwise, it must be a single option so just push it onto argv
			else
				argv=("${argv[@]}" "$1")
			fi
			shift
		# arguments just get pushed onto argv in order too
		else
			argv=("${argv[@]}" "$1")
			shift
		fi
	done
	argc=${#argv[@]}
}

# build a mirror path from a repo name/URL
function repo_mirror_path() {
  local remote_repo="$1"
  local group="$2"
  local repo

  if [[ "${remote_repo}" =~ ([^\/]+)\.git$ ]]; then
    repo="${BASH_REMATCH[1]}"
  elif [[ "${remote_repo}" =~ ([^\/]+)$ ]]; then
    repo="${BASH_REMATCH[1]}"
  fi

  if [ -n "${repo}" ]; then
    echo "${TIGGIT_MIRRORS_PATH}/${group}/${repo}.git"
  fi
}

# determine if a repo is already mirrored
function is_repo_mirrored() {
  local success=false
  local remote_repo="$1"
  local group="$2"
  local repo_path="$(repo_mirror_path "${remote_repo}" "${group}")"

  if [ -d "${repo_path}" ] && [ "$(git -C "${repo_path}" remote get-url origin)" = "${remote_repo}" ]; then success=true; fi

  $success
}

# create mirror of specified git repo
function repo_mirror_create() {
  local remote_repo="$1"
  local group="$2"
  local repo_path="$(repo_mirror_path "${remote_repo}" "${group}")"

  local git_cmd=("indent" "git" "clone")
  if ! $verbose; then git_cmd+=("-q"); fi
  git_cmd+=("--mirror" "${remote_repo}" "${repo_path}")

  if $verbose; then echo "Mirroring '${remote_repo}' to '${repo_path}'..."; fi
  if "${git_cmd[@]}"; then
    if $verbose; then echo "Done."; fi
  else
    if $verbose; then echo "ERROR!"; fi
    exit 1
  fi
}

# fetch latest changes of specified git repo
function repo_mirror_update() {
  local repo="$1"
  local repo_path="${TIGGIT_MIRRORS_PATH}/${repo}.git"
  local git_cmd=("indent" "git" "-C" "${repo_path}" "remote" "update")

  if $verbose; then echo "Updating '${repo}' in '${repo_path}'..."; fi
  if ! $verbose; then
    "${git_cmd[@]}" >/dev/null
  else
    "${git_cmd[@]}"
  fi
  if [ $? -gt 0 ]; then
    if $verbose; then echo "ERROR!"; fi
  else
    if $verbose; then echo "Done."; fi
  fi
}

# return list of all the git repos mirrored
function repo_mirrors_list() {
  while IFS= read -r line; do
    if [[ "$(basename "${line}")" =~ ^(.+)\.git$ ]]; then
      echo "${BASH_REMATCH[1]}"
    fi
  done <<< "$(find "${TIGGIT_MIRRORS_PATH}" -name "*.git" -mindepth 1 -maxdepth 1)"

  local group=""
  while IFS= read -r line; do
    if [[ "$(basename "${line}")" =~ ^(.+)\.git$ ]]; then
      group="$(basename "$(dirname "$line")")"
      echo "${group}/${BASH_REMATCH[1]}"
    fi
  done <<< "$(find "${TIGGIT_MIRRORS_PATH}" -name "*.git" -mindepth 2 -maxdepth 2)"
}

# fetch latest changes of all git repos
function repo_mirror_update_all() {
  local success=true

  if $verbose; then echo "Updating all repositories in '${TIGGIT_MIRRORS_PATH}'..."; fi
  while IFS= read -r line; do
    indent repo_mirror_update "$line"
    if [ $? -gt 0 ]; then success=false; fi
  done <<< "$(repo_mirrors_list)"
  if $success; then
    if $verbose; then echo "Done."; fi
  else
    if $verbose; then echo "Done."; fi
  fi

  $success
}

# load repos to mirror from config file
function config_load() {
  local success=true

  if $verbose; then echo "Reading git repositories to mirror from config file '${config_file}'... "; fi
  if [ ! -f "${config_file}" ]; then
    echo "ERROR! Config file '${config_file} not found!"
    success=false
  else
    local line
    local group=""
    while IFS= read -r line; do
      # accept any line that's not blank or is a comment (starts with a hash/pound character)
      if [[ "${line}" =~ ^([^#].+)$ ]]; then
        # handle group/namespace directives
        if [[ "${line}" =~ ^\[(.+)\]$ ]]; then
          if [ "${group}" != "${BASH_REMATCH[1]}" ]; then
            group="${BASH_REMATCH[1]}"
          fi
        else
          if $verbose; then indent echo "[${group}] ${line}"; fi
          config_repos+=("${group}::${line}")
        fi
      fi
    done < "${config_file}"
  fi
  if $verbose; then echo "Done."; fi

  $success
}

# run as a daemon, mirroring repositories from config file
function daemonize() {
  if ! $daemon; then
    echo "ERROR! Not in daemon mode, so cannot daemonize! Exiting." 1>&2
    exit 1
  fi

  if ! config_load; then
    echo "ERROR! Could not load repositories from config file! Exiting." 1>&2
    exit 1
  fi

  # mirror all the git repos
  if $verbose; then echo "Mirroring all repositories... "; fi
  local group=""
  for repo in "${config_repos[@]}"; do
    if [[ "$repo" =~ ^(.*)::(.+)$ ]]; then
      group="${BASH_REMATCH[1]}"
      repo="${BASH_REMATCH[2]}"
    fi
    if $verbose; then echo -n "  [${group}] ${repo} ... "; fi
    if is_repo_mirrored "${repo}" "${group}"; then
      if $verbose; then echo "Mirrored"; fi
    elif indent repo_mirror_create "${repo}" "${group}"; then
      if $verbose; then echo "Mirrored"; fi
    else
      echo "ERROR!"
    fi
  done
  if $verbose; then echo "Done."; fi

  # configure traps
  trap 'config_load' HUP

  # daemon runtime loop
  local start_time
  local sleep_time
  while true; do
    start_time="$(date +%s)"

    # update all the repositories
    repo_mirror_update_all

    # wait the remainder of the interval
    sleep_time="$(( ${TIGGIT_UPDATE_INTERVAL} - ( $(date +%s) - ${start_time} ) ))"
    if $verbose; then echo "Sleeping ${sleep_time} seconds..."; fi
    sleep "${sleep_time}"
  done
}

function main() {
  # require at least one option or argument
  if [ $argc -eq 0 ]; then
  	echo "No options or arguments were specified!"$'\n'
  	usage
  	exit 1
  fi
  
	# handle arguments
	local command repository
	for (( i=0; i<$argc; i++ )); do
		# is this an option (e.g. starts with a dash) or an argument?
		if [ "${argv[$i]:0:1}" = "-" ]; then
			case "${argv[$i]}" in
			  # see if the user is specifying a config file
			  "-c" | "--config")
			    config_file="${argv[$i+1]}"
			    (( i++ ))
			    ;;
			  # see if the user intended us to run as a daemon
			  "-d" | "--daemon")
			    daemon=true
			    ;;
				# see if the user intended us to run in verbose mode
				"-v" | "--verbose")
					verbose=true
					;;
				# see if the user requested help
				"-h" | "--help")
					usage
					exit
					;;
				# see if the user requested the version
				"-V" | "--version")
					version
					exit
					;;
				# handle other options
			
				# unknown option
				*)
					echo "$tool: Unknown option '${argv[$i]}''!"
					exit 1
					;;
			esac
		# handle arguments
		else
			case "${argv[$i]}" in
			  # commands
			  "list")
			    repo_mirrors_list
			    ;;
			  "mirror")
			    repo_mirror_create "${argv[$i+1]}"
			    (( i++ ))
			    ;;
			  "update")
			    if [ "${argv[$i+1]}" = "all" ]; then
			      repo_mirror_update_all
			    else
            repo_mirror_update "${argv[$i+1]}"
          fi
			    (( i++ ))
			    ;;
			  # unknown command/argument
				*)
				  echo "$tool: Unknown command '${argv[$i]}'!"
					exit 1
					;;
			esac
		fi
	done

	if $daemon; then daemonize; fi
}

args_preprocess "$@"
main